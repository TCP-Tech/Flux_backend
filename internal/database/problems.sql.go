// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: problems.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const addProblem = `-- name: AddProblem :one
INSERT INTO problems (
    title,
    statement,
    input_format,
    output_format,
    eample_testcases,
    notes,
    memory_limit_kb,
    time_limit_ms,
    created_by,
    difficulty,
    submission_link,
    platform
) VALUES (
    $1, -- title
    $2, -- statement
    $3, -- input_format (can be NULL)
    $4, -- output_format (can be NULL)
    $5, -- samples (can be NULL)
    $6, -- notes (can be NULL)
    $7, -- memory_limit_kb
    $8, -- time_limit_ms
    $9, -- created_by (UUID)
    $10, -- difficulty (can be NULL)
    $11, -- submission_link (can be NULL)
    $12  -- platform (can be NULL)
)
RETURNING id, created_at, updated_at
`

type AddProblemParams struct {
	Title           string                `json:"title"`
	Statement       string                `json:"statement"`
	InputFormat     string                `json:"input_format"`
	OutputFormat    string                `json:"output_format"`
	EampleTestcases pqtype.NullRawMessage `json:"eample_testcases"`
	Notes           sql.NullString        `json:"notes"`
	MemoryLimitKb   int32                 `json:"memory_limit_kb"`
	TimeLimitMs     int32                 `json:"time_limit_ms"`
	CreatedBy       uuid.UUID             `json:"created_by"`
	Difficulty      int32                 `json:"difficulty"`
	SubmissionLink  sql.NullString        `json:"submission_link"`
	Platform        NullPlatformType      `json:"platform"`
}

type AddProblemRow struct {
	ID        int32     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) AddProblem(ctx context.Context, arg AddProblemParams) (AddProblemRow, error) {
	row := q.db.QueryRowContext(ctx, addProblem,
		arg.Title,
		arg.Statement,
		arg.InputFormat,
		arg.OutputFormat,
		arg.EampleTestcases,
		arg.Notes,
		arg.MemoryLimitKb,
		arg.TimeLimitMs,
		arg.CreatedBy,
		arg.Difficulty,
		arg.SubmissionLink,
		arg.Platform,
	)
	var i AddProblemRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const checkPlatformType = `-- name: CheckPlatformType :one
SELECT $1::platform_type
`

func (q *Queries) CheckPlatformType(ctx context.Context, dollar_1 string) (string, error) {
	row := q.db.QueryRowContext(ctx, checkPlatformType, dollar_1)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const getProblemById = `-- name: GetProblemById :one
SELECT id, title, statement, input_format, output_format, eample_testcases, notes, memory_limit_kb, time_limit_ms, created_by, created_at, updated_at, difficulty, submission_link, platform FROM problems WHERE id = $1
`

func (q *Queries) GetProblemById(ctx context.Context, id int32) (Problem, error) {
	row := q.db.QueryRowContext(ctx, getProblemById, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Statement,
		&i.InputFormat,
		&i.OutputFormat,
		&i.EampleTestcases,
		&i.Notes,
		&i.MemoryLimitKb,
		&i.TimeLimitMs,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Difficulty,
		&i.SubmissionLink,
		&i.Platform,
	)
	return i, err
}
