// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name, roll_no, password_hash, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, roll_no, user_name, first_name, last_name, email, password_hash, created_at
`

type CreateUserParams struct {
	UserName     string `json:"user_name"`
	RollNo       string `json:"roll_no"`
	PasswordHash string `json:"password_hash"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Email        string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.RollNo,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RollNo,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, roll_no, user_name, first_name, last_name, email, password_hash, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RollNo,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByRollNumber = `-- name: GetUserByRollNumber :one
SELECT id, roll_no, user_name, first_name, last_name, email, password_hash, created_at FROM users WHERE roll_no = $1
`

func (q *Queries) GetUserByRollNumber(ctx context.Context, rollNo string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByRollNumber, rollNo)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RollNo,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, roll_no, user_name, first_name, last_name, email, password_hash, created_at FROM users WHERE user_name = $1
`

func (q *Queries) GetUserByUserName(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserName, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RollNo,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersCountByUserName = `-- name: GetUsersCountByUserName :one
SELECT COUNT(*) FROM users WHERE user_name = $1
`

func (q *Queries) GetUsersCountByUserName(ctx context.Context, userName string) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCountByUserName, userName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const resetPassword = `-- name: ResetPassword :exec
UPDATE users SET password_hash = $2 WHERE user_name = $1
`

type ResetPasswordParams struct {
	UserName     string `json:"user_name"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.db.Exec(ctx, resetPassword, arg.UserName, arg.PasswordHash)
	return err
}
