// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contests.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addProblemToContest = `-- name: AddProblemToContest :one
INSERT INTO contest_problems (
    contest_id,
    problem_id,
    score
) VALUES (
    $1,
    $2,
    $3
)
RETURNING contest_id, problem_id, score
`

type AddProblemToContestParams struct {
	ContestID uuid.UUID `json:"contest_id"`
	ProblemID int32     `json:"problem_id"`
	Score     int32     `json:"score"`
}

func (q *Queries) AddProblemToContest(ctx context.Context, arg AddProblemToContestParams) (ContestProblem, error) {
	row := q.db.QueryRowContext(ctx, addProblemToContest, arg.ContestID, arg.ProblemID, arg.Score)
	var i ContestProblem
	err := row.Scan(&i.ContestID, &i.ProblemID, &i.Score)
	return i, err
}

const addUserToContest = `-- name: AddUserToContest :one
INSERT INTO contest_registered_users (
    user_id,
    contest_id
) VALUES (
    $1,
    $2
)
RETURNING user_id, contest_id
`

type AddUserToContestParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ContestID uuid.UUID `json:"contest_id"`
}

func (q *Queries) AddUserToContest(ctx context.Context, arg AddUserToContestParams) (ContestRegisteredUser, error) {
	row := q.db.QueryRowContext(ctx, addUserToContest, arg.UserID, arg.ContestID)
	var i ContestRegisteredUser
	err := row.Scan(&i.UserID, &i.ContestID)
	return i, err
}

const createContest = `-- name: CreateContest :one
INSERT INTO contest (
    title,
    created_by,
    start_time,
    end_time,
    is_published
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, title, created_by, created_at, updated_at, start_time, end_time, is_published, lock_id
`

type CreateContestParams struct {
	Title       string    `json:"title"`
	CreatedBy   uuid.UUID `json:"created_by"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	IsPublished bool      `json:"is_published"`
}

func (q *Queries) CreateContest(ctx context.Context, arg CreateContestParams) (Contest, error) {
	row := q.db.QueryRowContext(ctx, createContest,
		arg.Title,
		arg.CreatedBy,
		arg.StartTime,
		arg.EndTime,
		arg.IsPublished,
	)
	var i Contest
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartTime,
		&i.EndTime,
		&i.IsPublished,
		&i.LockID,
	)
	return i, err
}

const deleteProblemsByContestId = `-- name: DeleteProblemsByContestId :exec
DELETE FROM contest_problems WHERE contest_id = $1
`

func (q *Queries) DeleteProblemsByContestId(ctx context.Context, contestID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProblemsByContestId, contestID)
	return err
}

const deleteUsersByContestId = `-- name: DeleteUsersByContestId :exec
DELETE FROM contest_registered_users WHERE contest_id = $1
`

func (q *Queries) DeleteUsersByContestId(ctx context.Context, contestID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUsersByContestId, contestID)
	return err
}
