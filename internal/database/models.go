// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type PlatformType string

const (
	PlatformTypeCodeforces PlatformType = "codeforces"
)

func (e *PlatformType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlatformType(s)
	case string:
		*e = PlatformType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlatformType: %T", src)
	}
	return nil
}

type NullPlatformType struct {
	PlatformType PlatformType `json:"platform_type"`
	Valid        bool         `json:"valid"` // Valid is true if PlatformType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatformType) Scan(value interface{}) error {
	if value == nil {
		ns.PlatformType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlatformType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatformType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlatformType), nil
}

type Bot struct {
	ID          uuid.UUID             `json:"id"`
	AccountName string                `json:"account_name"`
	Platform    string                `json:"platform"`
	WebsiteData pqtype.NullRawMessage `json:"website_data"`
	CreatedAt   time.Time             `json:"created_at"`
	UpdatedAt   time.Time             `json:"updated_at"`
}

type Contest struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	CreatedBy   uuid.UUID `json:"created_by"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	IsPublished bool      `json:"is_published"`
	LockID      uuid.UUID `json:"lock_id"`
}

type ContestProblem struct {
	ContestID uuid.UUID `json:"contest_id"`
	ProblemID int32     `json:"problem_id"`
	Score     int32     `json:"score"`
}

type ContestRegisteredUser struct {
	UserID    uuid.UUID `json:"user_id"`
	ContestID uuid.UUID `json:"contest_id"`
}

type Lock struct {
	ID      uuid.UUID      `json:"id"`
	Timeout time.Time      `json:"timeout"`
	Access  sql.NullString `json:"access"`
}

type Problem struct {
	ID               int32                 `json:"id"`
	Title            string                `json:"title"`
	Statement        string                `json:"statement"`
	InputFormat      string                `json:"input_format"`
	OutputFormat     string                `json:"output_format"`
	ExampleTestcases pqtype.NullRawMessage `json:"example_testcases"`
	Notes            sql.NullString        `json:"notes"`
	MemoryLimitKb    int32                 `json:"memory_limit_kb"`
	TimeLimitMs      int32                 `json:"time_limit_ms"`
	CreatedBy        uuid.UUID             `json:"created_by"`
	LastUpdatedBy    uuid.UUID             `json:"last_updated_by"`
	CreatedAt        time.Time             `json:"created_at"`
	UpdatedAt        time.Time             `json:"updated_at"`
	Difficulty       int32                 `json:"difficulty"`
	SubmissionLink   sql.NullString        `json:"submission_link"`
	Platform         NullPlatformType      `json:"platform"`
	LockID           uuid.NullUUID         `json:"lock_id"`
}

type Role struct {
	RoleName string `json:"role_name"`
}

type Solved struct {
	UserID    uuid.UUID `json:"user_id"`
	ContestID uuid.UUID `json:"contest_id"`
	ProblemID uuid.UUID `json:"problem_id"`
}

type Submission struct {
	ID           uuid.UUID             `json:"id"`
	BotAccountID uuid.UUID             `json:"bot_account_id"`
	WebsiteData  pqtype.NullRawMessage `json:"website_data"`
	SubmittedBy  uuid.UUID             `json:"submitted_by"`
	ContestID    uuid.NullUUID         `json:"contest_id"`
	ProblemID    uuid.UUID             `json:"problem_id"`
	Language     string                `json:"language"`
	Solution     string                `json:"solution"`
	Status       sql.NullString        `json:"status"`
	CreatedAt    time.Time             `json:"created_at"`
	UpdatedAt    time.Time             `json:"updated_at"`
}

type Token struct {
	ID          uuid.UUID       `json:"id"`
	HashedToken string          `json:"hashed_token"`
	Purpose     string          `json:"purpose"`
	Payload     json.RawMessage `json:"payload"`
	Email       string          `json:"email"`
	ExpiresAt   time.Time       `json:"expires_at"`
	CreatedAt   time.Time       `json:"created_at"`
}

type Tournament struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Rounds    int32     `json:"rounds"`
	CreatedBy uuid.UUID `json:"created_by"`
	UpdatedBy uuid.UUID `json:"updated_by"`
	StartTime time.Time `json:"start_time"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type TournamentContest struct {
	ContestID    uuid.UUID `json:"contest_id"`
	TournamentID uuid.UUID `json:"tournament_id"`
	Round        int32     `json:"round"`
}

type User struct {
	ID           uuid.UUID `json:"id"`
	RollNo       string    `json:"roll_no"`
	UserName     string    `json:"user_name"`
	FirstName    string    `json:"first_name"`
	LastName     string    `json:"last_name"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
}

type UserRole struct {
	UserID   uuid.UUID `json:"user_id"`
	RoleName string    `json:"role_name"`
}

type UserScore struct {
	UserID       uuid.UUID `json:"user_id"`
	ContestID    uuid.UUID `json:"contest_id"`
	ProblemID    uuid.UUID `json:"problem_id"`
	Score        int32     `json:"score"`
	UpdatedAt    time.Time `json:"updated_at"`
	SubmissionID uuid.UUID `json:"submission_id"`
}
