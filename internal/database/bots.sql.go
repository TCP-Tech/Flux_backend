// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bots.sql

package database

import (
	"context"
	"encoding/json"
)

const deleteBots = `-- name: DeleteBots :exec
DELETE FROM bots WHERE name=$1
`

func (q *Queries) DeleteBots(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteBots, name)
	return err
}

const getBots = `-- name: GetBots :many
SELECT name, platform, cookies, created_at, updated_at FROM bots
`

func (q *Queries) GetBots(ctx context.Context) ([]Bot, error) {
	rows, err := q.db.Query(ctx, getBots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bot
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.Name,
			&i.Platform,
			&i.Cookies,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBot = `-- name: InsertBot :one
INSERT INTO bots (
    name, platform, cookies
) VALUES (
    $1, $2, $3
) RETURNING name, platform, cookies, created_at, updated_at
`

type InsertBotParams struct {
	Name     string          `json:"name"`
	Platform string          `json:"platform"`
	Cookies  json.RawMessage `json:"cookies"`
}

func (q *Queries) InsertBot(ctx context.Context, arg InsertBotParams) (Bot, error) {
	row := q.db.QueryRow(ctx, insertBot, arg.Name, arg.Platform, arg.Cookies)
	var i Bot
	err := row.Scan(
		&i.Name,
		&i.Platform,
		&i.Cookies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBotCookies = `-- name: UpdateBotCookies :one
UPDATE bots SET cookies=$2 WHERE name=$1 RETURNING name, platform, cookies, created_at, updated_at
`

type UpdateBotCookiesParams struct {
	Name    string          `json:"name"`
	Cookies json.RawMessage `json:"cookies"`
}

func (q *Queries) UpdateBotCookies(ctx context.Context, arg UpdateBotCookiesParams) (Bot, error) {
	row := q.db.QueryRow(ctx, updateBotCookies, arg.Name, arg.Cookies)
	var i Bot
	err := row.Scan(
		&i.Name,
		&i.Platform,
		&i.Cookies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
